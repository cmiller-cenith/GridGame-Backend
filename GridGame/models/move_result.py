# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from GridGame.models.base_model_ import Model
from GridGame.models.coord import Coord  # noqa: F401,E501
from GridGame.models.move import Move  # noqa: F401,E501
from GridGame import util


class MoveResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, position: Coord=None, health: int=None, moves: int=None, available_moves: List[Move]=None):  # noqa: E501
        """MoveResult - a model defined in Swagger

        :param position: The position of this MoveResult.  # noqa: E501
        :type position: Coord
        :param health: The health of this MoveResult.  # noqa: E501
        :type health: int
        :param moves: The moves of this MoveResult.  # noqa: E501
        :type moves: int
        :param available_moves: The available_moves of this MoveResult.  # noqa: E501
        :type available_moves: List[Move]
        """
        self.swagger_types = {
            'position': Coord,
            'health': int,
            'moves': int,
            'available_moves': List[Move]
        }

        self.attribute_map = {
            'position': 'position',
            'health': 'health',
            'moves': 'moves',
            'available_moves': 'available_moves'
        }
        self._position = position
        self._health = health
        self._moves = moves
        self._available_moves = available_moves

    @classmethod
    def from_dict(cls, dikt) -> 'MoveResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MoveResult of this MoveResult.  # noqa: E501
        :rtype: MoveResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position(self) -> Coord:
        """Gets the position of this MoveResult.


        :return: The position of this MoveResult.
        :rtype: Coord
        """
        return self._position

    @position.setter
    def position(self, position: Coord):
        """Sets the position of this MoveResult.


        :param position: The position of this MoveResult.
        :type position: Coord
        """

        self._position = position

    @property
    def health(self) -> int:
        """Gets the health of this MoveResult.


        :return: The health of this MoveResult.
        :rtype: int
        """
        return self._health

    @health.setter
    def health(self, health: int):
        """Sets the health of this MoveResult.


        :param health: The health of this MoveResult.
        :type health: int
        """

        self._health = health

    @property
    def moves(self) -> int:
        """Gets the moves of this MoveResult.


        :return: The moves of this MoveResult.
        :rtype: int
        """
        return self._moves

    @moves.setter
    def moves(self, moves: int):
        """Sets the moves of this MoveResult.


        :param moves: The moves of this MoveResult.
        :type moves: int
        """

        self._moves = moves

    @property
    def available_moves(self) -> List[Move]:
        """Gets the available_moves of this MoveResult.


        :return: The available_moves of this MoveResult.
        :rtype: List[Move]
        """
        return self._available_moves

    @available_moves.setter
    def available_moves(self, available_moves: List[Move]):
        """Sets the available_moves of this MoveResult.


        :param available_moves: The available_moves of this MoveResult.
        :type available_moves: List[Move]
        """

        self._available_moves = available_moves

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from GridGame.models.base_model_ import Model
from GridGame.models.world import World  # noqa: F401,E501
from GridGame.models.world_save_player import WorldSavePlayer  # noqa: F401,E501
from GridGame import util


class WorldSave(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, world: World=None, player: WorldSavePlayer=None):  # noqa: E501
        """WorldSave - a model defined in Swagger

        :param world: The world of this WorldSave.  # noqa: E501
        :type world: World
        :param player: The player of this WorldSave.  # noqa: E501
        :type player: WorldSavePlayer
        """
        self.swagger_types = {
            'world': World,
            'player': WorldSavePlayer
        }

        self.attribute_map = {
            'world': 'world',
            'player': 'player'
        }
        self._world = world
        self._player = player

    @classmethod
    def from_dict(cls, dikt) -> 'WorldSave':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorldSave of this WorldSave.  # noqa: E501
        :rtype: WorldSave
        """
        return util.deserialize_model(dikt, cls)

    @property
    def world(self) -> World:
        """Gets the world of this WorldSave.


        :return: The world of this WorldSave.
        :rtype: World
        """
        return self._world

    @world.setter
    def world(self, world: World):
        """Sets the world of this WorldSave.


        :param world: The world of this WorldSave.
        :type world: World
        """

        self._world = world

    @property
    def player(self) -> WorldSavePlayer:
        """Gets the player of this WorldSave.


        :return: The player of this WorldSave.
        :rtype: WorldSavePlayer
        """
        return self._player

    @player.setter
    def player(self, player: WorldSavePlayer):
        """Sets the player of this WorldSave.


        :param player: The player of this WorldSave.
        :type player: WorldSavePlayer
        """

        self._player = player
